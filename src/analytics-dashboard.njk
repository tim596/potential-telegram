---
layout: base.njk
title: "Analytics Dashboard - A Bedder World"
description: "Real-time analytics and performance tracking for all A Bedder World location pages"
permalink: "/analytics-dashboard/"
eleventyExcludeFromCollections: true
---

<div class="analytics-dashboard">
  <div class="dashboard-header">
    <h1>A Bedder World Analytics Dashboard</h1>
    <div class="dashboard-controls">
      <button id="refresh-data" class="btn btn-primary">Refresh Data</button>
      <button id="export-data" class="btn btn-secondary">Export CSV</button>
      <select id="date-range">
        <option value="7">Last 7 days</option>
        <option value="30" selected>Last 30 days</option>
        <option value="90">Last 90 days</option>
      </select>
    </div>
  </div>

  <!-- Summary Statistics -->
  <div class="dashboard-summary">
    <div class="stat-card">
      <h3>Total Location Pages</h3>
      <div class="stat-number" id="total-locations">{{ collections.allLocations | length }}</div>
      <div class="stat-change" id="locations-change">+0 this week</div>
    </div>

    <div class="stat-card">
      <h3>Average Position</h3>
      <div class="stat-number" id="avg-position">--</div>
      <div class="stat-change" id="position-change">Loading...</div>
    </div>

    <div class="stat-card">
      <h3>Booking Attempts</h3>
      <div class="stat-number" id="booking-attempts">--</div>
      <div class="stat-change" id="attempts-change">Loading...</div>
    </div>

    <div class="stat-card">
      <h3>Booking Completions</h3>
      <div class="stat-number" id="booking-completions">--</div>
      <div class="stat-change" id="completions-change">Loading...</div>
    </div>

    <div class="stat-card">
      <h3>Booking Drop-off Rate</h3>
      <div class="stat-number" id="drop-off-rate">--</div>
      <div class="stat-change" id="drop-off-change">Loading...</div>
    </div>

    <div class="stat-card">
      <h3>Best Performing City</h3>
      <div class="stat-number" id="best-city">--</div>
      <div class="stat-change" id="best-city-position">Loading...</div>
    </div>
  </div>

  <!-- Performance Charts -->
  <div class="dashboard-charts">
    <div class="chart-container">
      <h3>Ranking Trends (Last 30 Days)</h3>
      <canvas id="ranking-chart" width="800" height="400"></canvas>
    </div>

    <div class="chart-container">
      <h3>Booking Conversion Funnel</h3>
      <canvas id="conversion-chart" width="800" height="400"></canvas>
    </div>
  </div>

  <!-- Location Performance Table -->
  <div class="location-performance">
    <div class="table-header">
      <h3>Location Performance Breakdown</h3>
      <div class="table-controls">
        <input type="text" id="location-search" placeholder="Search locations...">
        <select id="sort-by">
          <option value="completions">Sort by Completions</option>
          <option value="attempts">Sort by Booking Attempts</option>
          <option value="position">Sort by Avg Position</option>
          <option value="traffic">Sort by Traffic</option>
          <option value="city">Sort by City Name</option>
        </select>
      </div>
    </div>

    <div class="table-container">
      <table id="location-performance-table">
        <thead>
          <tr>
            <th>Location</th>
            <th>Avg Position</th>
            <th>Traffic (30d)</th>
            <th>Booking Attempts</th>
            <th>Completions</th>
            <th>Completion Rate</th>
            <th>Top Keywords</th>
            <th>Opportunities</th>
          </tr>
        </thead>
        <tbody id="location-data">
          <tr>
            <td colspan="7" class="loading">Loading location data...</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Keyword Opportunities -->
  <div class="keyword-opportunities">
    <h3>Top Ranking Opportunities</h3>
    <div id="opportunities-list">
      <div class="loading">Analyzing ranking opportunities...</div>
    </div>
  </div>

  <!-- Real-time Activity Feed -->
  <div class="activity-feed">
    <h3>Real-time Activity</h3>
    <div id="activity-log">
      <div class="activity-item">
        <span class="timestamp">Loading...</span>
        <span class="activity-text">Initializing analytics dashboard...</span>
      </div>
    </div>
  </div>
</div>

<style>
  .analytics-dashboard {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 2px solid #e5e7eb;
  }

  .dashboard-header h1 {
    color: #111827;
    font-size: 2.25rem;
    font-weight: 700;
    margin: 0;
  }

  .dashboard-controls {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-primary {
    background-color: #a6ce39;
    color: white;
  }

  .btn-primary:hover {
    background-color: #8fb82d;
  }

  .btn-secondary {
    background-color: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background-color: #4b5563;
  }

  .dashboard-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 40px;
  }

  .stat-card {
    background: white;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border-left: 4px solid #a6ce39;
  }

  .stat-card h3 {
    margin: 0 0 8px 0;
    color: #6b7280;
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 700;
    color: #111827;
    margin-bottom: 4px;
  }

  .stat-change {
    font-size: 0.875rem;
    color: #16a34a;
  }

  .stat-change.negative {
    color: #dc2626;
  }

  .dashboard-charts {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 40px;
  }

  .chart-container {
    background: white;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .chart-container h3 {
    margin: 0 0 20px 0;
    color: #111827;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .location-performance {
    background: white;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-bottom: 40px;
  }

  .table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px;
    border-bottom: 1px solid #e5e7eb;
  }

  .table-header h3 {
    margin: 0;
    color: #111827;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .table-controls {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .table-controls input,
  .table-controls select {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 0.875rem;
  }

  .table-container {
    overflow-x: auto;
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th {
    background-color: #f9fafb;
    padding: 12px;
    text-align: left;
    font-weight: 600;
    color: #374151;
    border-bottom: 1px solid #e5e7eb;
  }

  td {
    padding: 12px;
    border-bottom: 1px solid #f3f4f6;
  }

  .loading {
    text-align: center;
    color: #6b7280;
    padding: 40px;
  }

  .keyword-opportunities {
    background: white;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-bottom: 40px;
  }

  .keyword-opportunities h3 {
    margin: 0 0 20px 0;
    color: #111827;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .opportunity-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    margin-bottom: 8px;
  }

  .activity-feed {
    background: white;
    padding: 24px;
    border-radius: 8px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .activity-feed h3 {
    margin: 0 0 20px 0;
    color: #111827;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .activity-item {
    display: flex;
    gap: 12px;
    padding: 8px 0;
    border-bottom: 1px solid #f3f4f6;
  }

  .activity-item:last-child {
    border-bottom: none;
  }

  .timestamp {
    color: #6b7280;
    font-size: 0.875rem;
    min-width: 100px;
  }

  .activity-text {
    color: #111827;
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .dashboard-header {
      flex-direction: column;
      gap: 20px;
      align-items: stretch;
    }

    .dashboard-charts {
      grid-template-columns: 1fr;
    }

    .table-header {
      flex-direction: column;
      gap: 16px;
      align-items: stretch;
    }

    .table-controls {
      flex-direction: column;
      gap: 8px;
    }
  }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Import our analytics modules
  {% include "analytics/ga4-enhanced-tracking.js" %}
  {% include "analytics/search-console-tracker.js" %}
  {% include "analytics/local-analytics-storage.js" %}
</script>

<script>
  class AnalyticsDashboard {
    constructor() {
      this.searchTracker = new SearchConsoleTracker();
      this.localStorage = new LocalAnalyticsStorage();
      this.charts = {};
      this.data = {
        locations: [],
        rankings: {},
        conversions: {},
        opportunities: []
      };

      this.init();
    }

    async init() {
      this.setupEventListeners();
      await this.loadDashboardData();
      this.renderCharts();
      this.renderLocationTable();
      this.startRealTimeUpdates();
    }

    setupEventListeners() {
      document.getElementById('refresh-data').addEventListener('click', () => {
        this.refreshData();
      });

      document.getElementById('export-data').addEventListener('click', () => {
        this.exportData();
      });

      document.getElementById('location-search').addEventListener('input', (e) => {
        this.filterLocations(e.target.value);
      });

      document.getElementById('sort-by').addEventListener('change', (e) => {
        this.sortLocations(e.target.value);
      });
    }

    async loadDashboardData() {
      try {
        // Load ranking data
        const rankingResults = await this.searchTracker.trackAllLocations();
        this.data.rankings = rankingResults;

        // Update summary statistics
        this.updateSummaryStats(rankingResults);

        // Load booking funnel data from GA4
        await this.loadBookingFunnelData();

        // Load ranking opportunities
        this.data.opportunities = await this.searchTracker.getRankingOpportunities();

        this.logActivity('Dashboard data loaded successfully');
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
        this.logActivity('Error loading dashboard data: ' + error.message);
      }
    }

    updateSummaryStats(rankingResults) {
      document.getElementById('total-locations').textContent =
        rankingResults.summary.total_locations || '{{ collections.allLocations | length }}';

      document.getElementById('avg-position').textContent =
        rankingResults.summary.avg_position
          ? rankingResults.summary.avg_position.toFixed(1)
          : '--';

      const positionChange = document.getElementById('position-change');
      const improved = rankingResults.summary.improved_rankings;
      const declined = rankingResults.summary.declined_rankings;

      if (improved > declined) {
        positionChange.textContent = `↑ ${improved} improved`;
        positionChange.className = 'stat-change positive';
      } else if (declined > improved) {
        positionChange.textContent = `↓ ${declined} declined`;
        positionChange.className = 'stat-change negative';
      } else {
        positionChange.textContent = 'No significant change';
        positionChange.className = 'stat-change';
      }

      // Find best performing city
      let bestCity = '--';
      let bestPosition = 999;

      for (const locationKey in rankingResults.locations) {
        const location = rankingResults.locations[locationKey];
        const positions = Object.values(location.keywords)
          .filter(k => k.position && !k.estimated)
          .map(k => k.position);

        if (positions.length > 0) {
          const avgPosition = positions.reduce((a, b) => a + b, 0) / positions.length;
          if (avgPosition < bestPosition) {
            bestPosition = avgPosition;
            bestCity = `${location.location.city}, ${location.location.state}`;
          }
        }
      }

      document.getElementById('best-city').textContent = bestCity;
      document.getElementById('best-city-position').textContent =
        bestPosition < 999 ? `Avg pos: ${bestPosition.toFixed(1)}` : 'No data';
    }

    async loadBookingFunnelData() {
      try {
        // Try to get real data from local storage first
        let funnelData;
        try {
          funnelData = this.localStorage.getBookingFunnelData(30);

          // If no real data, generate sample data for demo
          if (funnelData.attempts === 0 && funnelData.completions === 0) {
            this.localStorage.generateSampleData();
            funnelData = this.localStorage.getBookingFunnelData(30);
          }
        } catch (error) {
          console.warn('Local storage not available, using mock data');
          funnelData = this.getMockFunnelData();
        }

        // Try API as fallback
        if (!funnelData || (funnelData.attempts === 0 && funnelData.completions === 0)) {
          try {
            const response = await fetch('/api/booking-funnel');
            if (response.ok) {
              funnelData = await response.json();
            }
          } catch (error) {
            console.log('API not available, using local data');
          }
        }

        // Final fallback to mock data
        if (!funnelData) {
          funnelData = this.getMockFunnelData();
        }

        // Update booking attempts
        document.getElementById('booking-attempts').textContent = funnelData.attempts.toLocaleString();
        const attemptsChangeElement = document.getElementById('attempts-change');
        this.updateChangeIndicator(attemptsChangeElement, funnelData.attempts_change);

        // Update booking completions
        document.getElementById('booking-completions').textContent = funnelData.completions.toLocaleString();
        const completionsChangeElement = document.getElementById('completions-change');
        this.updateChangeIndicator(completionsChangeElement, funnelData.completions_change);

        // Calculate and update drop-off rate
        const dropOffRate = funnelData.attempts > 0
          ? (((funnelData.attempts - funnelData.completions) / funnelData.attempts) * 100).toFixed(1)
          : 0;
        document.getElementById('drop-off-rate').textContent = dropOffRate + '%';

        const dropOffChangeElement = document.getElementById('drop-off-change');
        const dropOffChange = parseFloat(funnelData.drop_off_change) || 0;
        this.updateChangeIndicator(dropOffChangeElement, -dropOffChange, true); // Negative change is good for drop-off

        // Store funnel data for chart rendering
        this.data.bookingFunnel = funnelData;

        this.logActivity(`Booking funnel updated: ${funnelData.attempts} attempts, ${funnelData.completions} completions`);
      } catch (error) {
        console.error('Failed to load booking funnel data:', error);
        this.logActivity('Error loading booking funnel data');

        // Final fallback to mock data
        const funnelData = this.getMockFunnelData();
        this.data.bookingFunnel = funnelData;
      }
    }

    getMockFunnelData() {
      const attempts = Math.floor(Math.random() * 300) + 150;
      const completions = Math.floor(attempts * (0.15 + Math.random() * 0.25)); // 15-40% completion rate
      return {
        attempts: attempts,
        completions: completions,
        attempts_change: Math.floor(Math.random() * 40) - 20,
        completions_change: Math.floor(Math.random() * 20) - 10,
        drop_off_change: Math.floor(Math.random() * 10) - 5
      };
    }

    updateChangeIndicator(element, change, reverseColors = false) {
      if (change > 0) {
        element.textContent = `+${change} this week`;
        element.className = reverseColors ? 'stat-change negative' : 'stat-change positive';
      } else if (change < 0) {
        element.textContent = `${change} this week`;
        element.className = reverseColors ? 'stat-change positive' : 'stat-change negative';
      } else {
        element.textContent = 'No change this week';
        element.className = 'stat-change';
      }
    }

    renderCharts() {
      this.renderRankingChart();
      this.renderConversionChart();
    }

    renderRankingChart() {
      const ctx = document.getElementById('ranking-chart').getContext('2d');

      // Generate mock trend data for demo
      const last30Days = Array.from({length: 30}, (_, i) => {
        const date = new Date();
        date.setDate(date.getDate() - (29 - i));
        return date.toLocaleDateString();
      });

      const avgPositions = last30Days.map(() =>
        Math.random() * 20 + 15 + (Math.random() - 0.5) * 4
      );

      this.charts.ranking = new Chart(ctx, {
        type: 'line',
        data: {
          labels: last30Days,
          datasets: [{
            label: 'Average Position',
            data: avgPositions,
            borderColor: '#a6ce39',
            backgroundColor: 'rgba(166, 206, 57, 0.1)',
            tension: 0.4,
            fill: true
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              reverse: true,
              beginAtZero: false,
              title: {
                display: true,
                text: 'Average Position (lower is better)'
              }
            }
          },
          plugins: {
            legend: {
              display: false
            }
          }
        }
      });
    }

    renderConversionChart() {
      const ctx = document.getElementById('conversion-chart').getContext('2d');
      const funnelData = this.data.bookingFunnel || this.getMockFunnelData();

      const completionRate = funnelData.attempts > 0
        ? (funnelData.completions / funnelData.attempts * 100).toFixed(1)
        : 0;
      const dropOffRate = (100 - completionRate).toFixed(1);

      this.charts.conversion = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['Booking Flow Steps'],
          datasets: [{
            label: 'Started Booking Process',
            data: [funnelData.attempts],
            backgroundColor: '#3b82f6',
            borderRadius: 6
          }, {
            label: 'Completed Booking',
            data: [funnelData.completions],
            backgroundColor: '#a6ce39',
            borderRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              display: false
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Number of Users'
              }
            }
          },
          plugins: {
            legend: {
              position: 'bottom'
            },
            tooltip: {
              callbacks: {
                afterBody: function(context) {
                  if (context[0].datasetIndex === 1) {
                    return [`Completion Rate: ${completionRate}%`, `Drop-off Rate: ${dropOffRate}%`];
                  }
                  return [];
                }
              }
            }
          },
          layout: {
            padding: {
              top: 20
            }
          }
        }
      });
    }

    renderLocationTable() {
      const tableBody = document.getElementById('location-data');
      const locations = this.data.rankings.locations || {};

      if (Object.keys(locations).length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="loading">No location data available</td></tr>';
        return;
      }

      const rows = [];
      for (const locationKey in locations) {
        const location = locations[locationKey];
        const keywords = Object.values(location.keywords || {});
        const positions = keywords.filter(k => k.position && !k.estimated).map(k => k.position);
        const avgPosition = positions.length > 0
          ? (positions.reduce((a, b) => a + b, 0) / positions.length).toFixed(1)
          : '--';

        const topKeywords = keywords
          .filter(k => k.position && k.position <= 10)
          .slice(0, 3)
          .map(k => k.keyword)
          .join(', ') || 'None in top 10';

        // Mock data for traffic and booking funnel
        const traffic = Math.floor(Math.random() * 500) + 100;
        const bookingAttempts = Math.floor(Math.random() * 20) + 5;
        const bookingCompletions = Math.floor(bookingAttempts * (0.15 + Math.random() * 0.25));
        const completionRate = bookingAttempts > 0 ? ((bookingCompletions / bookingAttempts) * 100).toFixed(1) : '0.0';

        const opportunityCount = keywords.filter(k =>
          k.position && k.position > 3 && k.position <= 20
        ).length;

        rows.push(`
          <tr>
            <td><strong>${location.location.city}, ${location.location.state}</strong></td>
            <td>${avgPosition}</td>
            <td>${traffic.toLocaleString()}</td>
            <td>${bookingAttempts}</td>
            <td>${bookingCompletions}</td>
            <td>${completionRate}%</td>
            <td>${topKeywords}</td>
            <td><span class="badge">${opportunityCount} opportunities</span></td>
          </tr>
        `);
      }

      tableBody.innerHTML = rows.join('');
    }

    async refreshData() {
      const refreshButton = document.getElementById('refresh-data');
      refreshButton.textContent = 'Refreshing...';
      refreshButton.disabled = true;

      try {
        await this.loadDashboardData();
        this.renderLocationTable();
        this.logActivity('Data refreshed successfully');
      } catch (error) {
        this.logActivity('Failed to refresh data: ' + error.message);
      } finally {
        refreshButton.textContent = 'Refresh Data';
        refreshButton.disabled = false;
      }
    }

    exportData() {
      const data = this.data.rankings;
      const csv = this.convertToCSV(data);
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);

      const a = document.createElement('a');
      a.href = url;
      a.download = `bedder-world-analytics-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      this.logActivity('Analytics data exported to CSV');
    }

    convertToCSV(data) {
      const headers = ['Location', 'State', 'Keyword', 'Position', 'Impressions', 'Clicks', 'CTR'];
      const rows = [headers.join(',')];

      for (const locationKey in data.locations) {
        const location = data.locations[locationKey];
        for (const keyword in location.keywords) {
          const ranking = location.keywords[keyword];
          rows.push([
            location.location.city,
            location.location.state,
            keyword,
            ranking.position || '',
            ranking.impressions || '',
            ranking.clicks || '',
            ranking.ctr || ''
          ].join(','));
        }
      }

      return rows.join('\n');
    }

    filterLocations(searchTerm) {
      const rows = document.querySelectorAll('#location-data tr');
      rows.forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(searchTerm.toLowerCase()) ? '' : 'none';
      });
    }

    sortLocations(sortBy) {
      // Implementation would sort the table by the selected criteria
      this.logActivity(`Table sorted by ${sortBy}`);
    }

    logActivity(message) {
      const activityLog = document.getElementById('activity-log');
      const timestamp = new Date().toLocaleTimeString();

      const activityItem = document.createElement('div');
      activityItem.className = 'activity-item';
      activityItem.innerHTML = `
        <span class="timestamp">${timestamp}</span>
        <span class="activity-text">${message}</span>
      `;

      activityLog.insertBefore(activityItem, activityLog.firstChild);

      // Keep only last 20 activities
      const activities = activityLog.querySelectorAll('.activity-item');
      if (activities.length > 20) {
        activities[activities.length - 1].remove();
      }
    }

    startRealTimeUpdates() {
      // Update dashboard every 5 minutes
      setInterval(() => {
        this.refreshData();
      }, 5 * 60 * 1000);
    }
  }

  // Initialize dashboard when page loads
  document.addEventListener('DOMContentLoaded', () => {
    new AnalyticsDashboard();
  });
</script>